package com.airportinfo.view.dialog;

import com.airportinfo.Setting;
import com.airportinfo.misc.BorderedTextField;
import com.airportinfo.model.MouseReleaseListener;
import com.airportinfo.util.EmailManager;
import com.airportinfo.util.Translator;
import com.intellij.uiDesigner.core.GridConstraints;
import com.intellij.uiDesigner.core.GridLayoutManager;

import javax.mail.MessagingException;
import javax.swing.*;
import java.awt.*;
import java.io.File;
import java.io.IOException;
import java.lang.reflect.Method;
import java.nio.file.Path;
import java.util.ResourceBundle;

/**
 * Email dialog view.
 *
 * @author lalaalal
 */
public class EmailDialogView extends DialogView {
    private JPanel panel;
    private JTextField emailTextField;
    private JButton sendButton;
    private JLabel toLabel;

    public EmailDialogView() {
        $$$setupUI$$$();
        dialog.setContentPane(panel);
        dialog.setSize(500, 50);

        sendButton.addMouseListener(new MouseReleaseListener(mouseEvent -> sendEmail()));
        addLocaleChangeListener(locale -> {
            toLabel.setText(Translator.getBundleString("to"));
            sendButton.setText(Translator.getBundleString("send"));
        });
    }

    @Override
    public JPanel getPanel() {
        return panel;
    }

    @Override
    public void load() {

    }

    private void sendEmail() {
        try {
            String email = emailTextField.getText();
            String tempDirectory = System.getProperty("java.io.tmpdir");
            File file = Path.of(tempDirectory, "save." + Setting.getInstance().getAirportTableExtension()).toFile();
            // TODO : Verify email format
            EmailManager.send(email, file.getPath());
            // TODO : Show progress dialog
            String title = Translator.getBundleString("info");
            String message = Translator.getBundleString("succeed");
            JOptionPane.showMessageDialog(dialog, message, title, JOptionPane.INFORMATION_MESSAGE);
            dialog.setVisible(false);
        } catch (IOException | MessagingException e) {
            String title = Translator.getBundleString("error");
            String message = Translator.getBundleString("email_send_failed");
            JOptionPane.showMessageDialog(dialog, message, title, JOptionPane.ERROR_MESSAGE);
        }
    }

    private void createUIComponents() {
        emailTextField = new BorderedTextField();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        createUIComponents();
        panel = new JPanel();
        panel.setLayout(new GridLayoutManager(1, 3, new Insets(10, 10, 10, 10), 10, -1));
        toLabel = new JLabel();
        this.$$$loadLabelText$$$(toLabel, this.$$$getMessageFromBundle$$$("string", "to"));
        panel.add(toLabel, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        panel.add(emailTextField, new GridConstraints(0, 1, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(150, -1), new Dimension(-1, 35), 0, false));
        sendButton = new JButton();
        this.$$$loadButtonText$$$(sendButton, this.$$$getMessageFromBundle$$$("string", "send"));
        panel.add(sendButton, new GridConstraints(0, 2, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, new Dimension(-1, 35), 0, false));
    }

    private static Method $$$cachedGetBundleMethod$$$ = null;

    private String $$$getMessageFromBundle$$$(String path, String key) {
        ResourceBundle bundle;
        try {
            Class<?> thisClass = this.getClass();
            if ($$$cachedGetBundleMethod$$$ == null) {
                Class<?> dynamicBundleClass = thisClass.getClassLoader().loadClass("com.intellij.DynamicBundle");
                $$$cachedGetBundleMethod$$$ = dynamicBundleClass.getMethod("getBundle", String.class, Class.class);
            }
            bundle = (ResourceBundle) $$$cachedGetBundleMethod$$$.invoke(null, path, thisClass);
        } catch (Exception e) {
            bundle = ResourceBundle.getBundle(path);
        }
        return bundle.getString(key);
    }

    /**
     * @noinspection ALL
     */
    private void $$$loadLabelText$$$(JLabel component, String text) {
        StringBuffer result = new StringBuffer();
        boolean haveMnemonic = false;
        char mnemonic = '\0';
        int mnemonicIndex = -1;
        for (int i = 0; i < text.length(); i++) {
            if (text.charAt(i) == '&') {
                i++;
                if (i == text.length()) break;
                if (!haveMnemonic && text.charAt(i) != '&') {
                    haveMnemonic = true;
                    mnemonic = text.charAt(i);
                    mnemonicIndex = result.length();
                }
            }
            result.append(text.charAt(i));
        }
        component.setText(result.toString());
        if (haveMnemonic) {
            component.setDisplayedMnemonic(mnemonic);
            component.setDisplayedMnemonicIndex(mnemonicIndex);
        }
    }

    /**
     * @noinspection ALL
     */
    private void $$$loadButtonText$$$(AbstractButton component, String text) {
        StringBuffer result = new StringBuffer();
        boolean haveMnemonic = false;
        char mnemonic = '\0';
        int mnemonicIndex = -1;
        for (int i = 0; i < text.length(); i++) {
            if (text.charAt(i) == '&') {
                i++;
                if (i == text.length()) break;
                if (!haveMnemonic && text.charAt(i) != '&') {
                    haveMnemonic = true;
                    mnemonic = text.charAt(i);
                    mnemonicIndex = result.length();
                }
            }
            result.append(text.charAt(i));
        }
        component.setText(result.toString());
        if (haveMnemonic) {
            component.setMnemonic(mnemonic);
            component.setDisplayedMnemonicIndex(mnemonicIndex);
        }
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return panel;
    }

}
